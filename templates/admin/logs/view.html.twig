{% extends 'admin/base.html.twig' %}

{% block title %}View Log: {{ log_file }}{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="{{ path('admin_dashboard') }}">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="{{ path('admin_logs_index') }}">Application Logs</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">{{ log_file }}</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-file-text me-2"></i>
                            <h5 class="card-title mb-0">{{ log_file }}</h5>
                        </div>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-light" onclick="location.reload()">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                            <a href="{{ path('admin_logs_download', {'logFile': log_file}) }}" class="btn btn-sm btn-outline-light">
                                <i class="bi bi-download"></i> Download
                            </a>
                            <button class="btn btn-sm btn-outline-light" data-bs-toggle="modal" data-bs-target="#clearLogModal">
                                <i class="bi bi-trash"></i> Clear
                            </button>
                            <button class="btn btn-sm btn-outline-light" id="toggleTail">
                                <i class="bi bi-play"></i> <span id="tailText">Start Live Tail</span>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Filters -->
                    <form method="GET" class="row g-3 mb-4">
                        <div class="col-md-2">
                            <label for="lines" class="form-label">Lines</label>
                            <select name="lines" id="lines" class="form-select form-select-sm">
                                <option value="100" {% if filters.lines == 100 %}selected{% endif %}>100</option>
                                <option value="500" {% if filters.lines == 500 %}selected{% endif %}>500</option>
                                <option value="1000" {% if filters.lines == 1000 %}selected{% endif %}>1000</option>
                                <option value="2000" {% if filters.lines == 2000 %}selected{% endif %}>2000</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="level" class="form-label">Level</label>
                            <select name="level" id="level" class="form-select form-select-sm">
                                <option value="" {% if filters.level == '' %}selected{% endif %}>All Levels</option>
                                <option value="DEBUG" {% if filters.level == 'DEBUG' %}selected{% endif %}>DEBUG</option>
                                <option value="INFO" {% if filters.level == 'INFO' %}selected{% endif %}>INFO</option>
                                <option value="WARNING" {% if filters.level == 'WARNING' %}selected{% endif %}>WARNING</option>
                                <option value="ERROR" {% if filters.level == 'ERROR' %}selected{% endif %}>ERROR</option>
                                <option value="CRITICAL" {% if filters.level == 'CRITICAL' %}selected{% endif %}>CRITICAL</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="search" class="form-label">Search</label>
                            <input type="text" name="search" id="search" class="form-control form-control-sm" 
                                   placeholder="Search in log content..." value="{{ filters.search }}">
                        </div>
                        <div class="col-md-2">
                            <label for="start_date" class="form-label">Start Date</label>
                            <input type="date" name="start_date" id="start_date" class="form-control form-control-sm" 
                                   value="{{ filters.start_date }}">
                        </div>
                        <div class="col-md-2">
                            <label for="end_date" class="form-label">End Date</label>
                            <input type="date" name="end_date" id="end_date" class="form-control form-control-sm" 
                                   value="{{ filters.end_date }}">
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary btn-sm w-100">
                                <i class="bi bi-search"></i> Filter
                            </button>
                        </div>
                    </form>

                    <!-- Log Content -->
                    <div class="log-container">
                        {% if log_content is empty %}
                            <div class="text-center py-5">
                                <i class="bi bi-file-text display-4 text-muted"></i>
                                <h5 class="text-muted mt-3">No Log Entries Found</h5>
                                <p class="text-muted">Try adjusting your filters or the log file may be empty.</p>
                            </div>
                        {% else %}
                            <div id="logEntries" class="log-entries">
                                {% for entry in log_content %}
                                    <div class="log-entry mb-2 p-2 border-start border-3 
                                        {% if entry.level == 'ERROR' or entry.level == 'CRITICAL' %}border-danger bg-danger-subtle
                                        {% elseif entry.level == 'WARNING' %}border-warning bg-warning-subtle
                                        {% elseif entry.level == 'INFO' %}border-info bg-info-subtle
                                        {% else %}border-secondary bg-light
                                        {% endif %}">
                                        <div class="row">
                                            <div class="col-auto">
                                                <small class="text-muted">{{ entry.formatted_datetime }}</small>
                                            </div>
                                            <div class="col-auto">
                                                <span class="badge 
                                                    {% if entry.level == 'ERROR' or entry.level == 'CRITICAL' %}bg-danger
                                                    {% elseif entry.level == 'WARNING' %}bg-warning
                                                    {% elseif entry.level == 'INFO' %}bg-info
                                                    {% else %}bg-secondary
                                                    {% endif %}">
                                                    {{ entry.level }}
                                                </span>
                                            </div>
                                            <div class="col-auto">
                                                <small class="badge bg-light text-dark">{{ entry.channel }}</small>
                                            </div>
                                            <div class="col">
                                                <code class="text-break">{{ entry.message }}</code>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>

                            <div class="mt-3 text-muted small">
                                Showing {{ log_content|length }} entries
                                {% if filters.search or filters.level or filters.start_date or filters.end_date %}
                                    (filtered)
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Clear Log Modal -->
<div class="modal fade" id="clearLogModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Clear Log File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This will clear all content from the log file <strong>{{ log_file }}</strong>.
                    A backup will be created before clearing.
                </div>
                <p>Are you sure you want to clear this log file?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="POST" action="{{ path('admin_logs_clear', {'logFile': log_file}) }}" class="d-inline">
                    <input type="hidden" name="_token" value="{{ csrf_token('clear_log_' ~ log_file) }}">
                    <button type="submit" class="btn btn-danger">Clear Log File</button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .log-entries {
            font-family: 'Courier New', monospace;
            max-height: 600px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            background-color: #f8f9fa;
        }
        
        .log-entry {
            font-size: 0.85rem;
            border-radius: 0.25rem;
        }
        
        .log-entry:hover {
            background-color: rgba(0, 0, 0, 0.05) !important;
        }
        
        .log-entry code {
            background: none;
            padding: 0;
            font-size: inherit;
            color: inherit;
        }
        
        .live-tail-active .log-entries {
            border-color: #198754;
            box-shadow: 0 0 10px rgba(25, 135, 84, 0.2);
        }
        
        .new-log-entry {
            animation: highlight 2s ease-in-out;
        }
        
        @keyframes highlight {
            0% { background-color: rgba(255, 193, 7, 0.5); }
            100% { background-color: inherit; }
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let tailInterval;
        let isTailing = false;
        let lastTimestamp = 0;
        
        document.getElementById('toggleTail').addEventListener('click', function() {
            if (isTailing) {
                stopTail();
            } else {
                startTail();
            }
        });
        
        function startTail() {
            isTailing = true;
            const button = document.getElementById('toggleTail');
            const text = document.getElementById('tailText');
            const logContainer = document.querySelector('.log-container');
            
            button.innerHTML = '<i class="bi bi-stop"></i> <span id="tailText">Stop Live Tail</span>';
            button.classList.remove('btn-outline-light');
            button.classList.add('btn-outline-success');
            logContainer.classList.add('live-tail-active');
            
            tailInterval = setInterval(function() {
                fetch(`{{ path('admin_logs_tail', {'logFile': log_file}) }}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.timestamp > lastTimestamp) {
                            updateLogEntries(data.lines);
                            lastTimestamp = data.timestamp;
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching tail data:', error);
                    });
            }, 2000);
        }
        
        function stopTail() {
            isTailing = false;
            const button = document.getElementById('toggleTail');
            const text = document.getElementById('tailText');
            const logContainer = document.querySelector('.log-container');
            
            button.innerHTML = '<i class="bi bi-play"></i> <span id="tailText">Start Live Tail</span>';
            button.classList.remove('btn-outline-success');
            button.classList.add('btn-outline-light');
            logContainer.classList.remove('live-tail-active');
            
            if (tailInterval) {
                clearInterval(tailInterval);
            }
        }
        
        function updateLogEntries(newLines) {
            const logEntries = document.getElementById('logEntries');
            if (!logEntries || !newLines || newLines.length === 0) return;
            
            // Simple approach: prepend new lines (assuming they're newer)
            newLines.slice(0, 10).forEach(line => { // Only show last 10 new lines
                if (line.trim()) {
                    const entry = createLogEntry(line);
                    entry.classList.add('new-log-entry');
                    logEntries.insertBefore(entry, logEntries.firstChild);
                }
            });
            
            // Remove old entries to prevent memory issues
            const entries = logEntries.querySelectorAll('.log-entry');
            if (entries.length > 1000) {
                for (let i = 1000; i < entries.length; i++) {
                    entries[i].remove();
                }
            }
        }
        
        function createLogEntry(line) {
            const div = document.createElement('div');
            div.className = 'log-entry mb-2 p-2 border-start border-3 border-secondary bg-light';
            
            const content = document.createElement('code');
            content.className = 'text-break';
            content.textContent = line;
            
            div.appendChild(content);
            return div;
        }
        
        // Auto-scroll to bottom for new entries
        function scrollToBottom() {
            const logEntries = document.querySelector('.log-entries');
            if (logEntries && isTailing) {
                logEntries.scrollTop = logEntries.scrollHeight;
            }
        }
        
        // Clear filters
        function clearFilters() {
            document.getElementById('lines').value = '500';
            document.getElementById('level').value = '';
            document.getElementById('search').value = '';
            document.getElementById('start_date').value = '';
            document.getElementById('end_date').value = '';
        }
    </script>
{% endblock %}